\section{Multiparty Off\-Chain State}

\paragraph{
目標は、参加者がそのサイドチェーンを下支えするネイティブのブロックチェーンの通貨やトークンの資金を保持したまま、多岐にわたるオンチェーンステートを用いることのない手法を開発することだ。Plasmaはオンチェーンとオフチェーンの間の境界線を曖昧にすることからはじまる （例：シャーディングにおけるshardたちはオンチェーン？オフチェーン？）。
オフチェーンで複数の管理者が存在するチャネルを作成しようとする際、主に2つの問題がある。ひとつは、その系（オフチェーン）をアップデートする際に、全ての参加者の間で状態を同期しなければいけないこと（でなければ、グローバルな状態更新をできる能力をトレードオフにすることになる）で、したがって参加者は全てオンラインであることが求められる。二つ目は、参加者をチャネルに追加・削除することが、大規模なオンチェーンでの状態更新を要求することや、追加・削除された参加者を列挙することだ。
それよりむしろ、大規模なルートチェーンでの状態更新なく多くの参加者の追加・削除ができ、全ての参加者が参加することない（参加者の残高更新かビザンチン障害が検出されたときだけ参加する必要がある）内部的な状態更新が可能であるようなメカニズムを作ることが好まれるだろう。
一般的な解法としては、ルートチェイン（例：Ethereum）のスマートコントラクトに存在する保有残高を許容する子チェーンになる。そのスマートコントラクトの残高は、子Plasmaチェーンでまとめられたブロックたちからのアロケーションで表される。これはユーザーにルートチェーンの残高と完全に等価なトークンを子チェーンで保有することを可能にし、一定の紛争調停期間ののちに引き出すことを可能にする。
これを達成するために、我々はUTXO(Unspent Transaction Output)モデルを台帳として導入する。これは明確な要件ではないが、高性能な残高引き出しを実現するのをたやすくするだけの理由付けがある。UTXOモデルを用いることの理論的裏付けは、コンパクトにその状態（例：残高）がすでに使用されているかどうかを表せるからだ。これはしばしばマークル化された証明としてのトライ木（マークル木）の中で表現され、第三者によってparseできるコンパクトな表現としてのビットマップとしても表される。言い換えると、スマートコントラクトはルートチェーン中のアカウントに保存されているが、Plasmaチェーンはルートチェーンアカウントに保持されている残高の割当に対してUTXOの残高セットを保持する。状態遷移に関して大した要件を持たない子チェーンは、より複雑で頻繁な状態遷移を用いる「アカウントモデル」を使用することも可能だが、親チェーンたちのblock spaceの可用性により依存することになる。
}

\paragraph{
差し当たって、ユーザーは子Plasmaチェーンのブロックを選ぶ単一のブロックのリーダーを想定することができる。これをProof of Stake集合や、M人のうちのN人のバリデーターとして解釈することはできる。しかしこれらの例では我々は単一の命名をされたバリデーターを簡潔化するために用いている。バリデーターの役割はトランザクションを搬送する役割に従事するブロックを提案することである。そのバリデーター（提案者）はルートチェーンのコントラクトに作成された不正防止機構によって制限されている。もしそのバリデーターが不正な状態遷移を含むブロックを伝播した場合、他のブロックを受け取った参加者は親チェーン上のマークル化された不正証明を提出でき、不正なブロックはペナルティとともにロールバックされる。
そのブロックはブロックを監視したい参加者（残高を持つ参加者や、個別のPlasmaチェーン上での計算処理を観測/強制したい参加者を含む）へ伝播される。
オフチェーンの状態に関するデポジットを維持するのには最小限の複雑さで済む一方で、オフチェーン状態遷移と引き出しはさらなる複雑さを生む。
}

\subsection{Fraud Proofs(不正証明/詐欺証明)}

子チェーンに含まれる全ての状態は、どのような参加者にも不正ブロックを規制することを可能にする不正証明を通して強制され、ブロックデータの可用性を期待できる。
しかし、これらを作成する上での最大の難関は、データとブロックの可用性に明確な保証がないことである。
ルートチェーン（例：Ethereum）において、ブロックデータが利用可能なときに全ての状態遷移が正しいことを確かめる不正証明のリストがある。複雑な計算処理のために、状態遷移は効率的な証明のためのマークル化をされていなければならない。
加えて、状態遷移は不適切な子チェーンからの離脱が不可能であることを確かめるzk\-SNARKs/STARKsによって強制されたものにもなる。zk\-SNARKsの作成は最大限の効率のために再帰的なSNARKsを必要とし、したがってさらなる可能性の研究を必要とするだろう。しかし、システムはSNARKsなしでも稼働するように設計されている。

%\ref{fig:hamu}
\begin{figure}[htbp]
  \begin{center}
    %\includegraphics[clip,width=7.0cm]{./img/dummy.eps}
    \caption{block1~4の全員がブロックデータを持っている。Block4がコミットした状態のトランザクションはおそらくマークル化されたBlock4とそれ以前のブロックのデータのコミットメントによると不正である}
    \label{fig:a}
  \end{center}
\end{figure}


不正証明は全ての状態遷移は検証されていることを確かめる。不正証明として挙げられるのは、トランザクションの利用可能性の証明（資金は現在のUTXOの中で利用可能）と、状態遷移の証明（アウトプットが利用されうる能力の署名のチェック含む）と、ブロックを横断した包含/排他の証明と、デポジット/引き出しの証明だ。その他のより複雑な証明はインタラクティブな駆け引きを必要とする。一般的な解釈はブロックの証明に機能的な（関数型の）アプローチをとることだ。

もしあるユーザーがこのコンセンサスメカニズムをSolidityでプログラムしたとして、関数ごとにブロックのマークル証明が引数としてひとつ追加されるだろうし、アウトプットは検証が正当であるかを返すだろう。(TODO)ユーザーはそれから、コンパクトなマークル化された証明（ユーザーは不正証明を生成するためにブロック全体を処理する必要がない）の中で処理をするために、単純にコンセンサスの検証のソースコードを複製する。

%\ref{fig:hamu}
\begin{figure}[htbp]
  \begin{center}
    %\includegraphics[clip,width=7.0cm]{./img/dummy.eps}
    \caption{Aliceは全てのブロックデータのコピーを持っており、彼女は不正証明をルートチェーンに提出する。Block4は無効化され、ロールバックされる。Block4の提出者はスマートコントラクト内に保持された供託金(bond,deposit)を失うことでペナルティを受ける。現在のブロックはBlock3(図中青)になる。ある程度時間が経ったあと、ブロックは確定(finalize)され、不正証明はもう提出されない。ユーザーは完全に検証されたブロックたちから不正だと証明されえないブロックの上にしかブロックを生成するべきではない}
    \label{fig:a}
  \end{center}
\end{figure}


この解決法に最小限の証明を持たせるために、けれども、全てのブロックはマークル化された現在の状態の木と、使用されたアウトプットの木と、トランザクションの木と、前の状態への参照のコミットメントを提供しなければならない。
不正証明は参加者の連合がペナルティなしに不正なブロックを作ることができないことを確かめなければならない。不正なブロックが検出されルートチェーン（もしくは親のPlasmaチェーン）で証明されたイベントにおいて、不正なブロックはロールバックされる。これは個々の参加者がビザンチン障害的な振る舞いに対抗するインセンティブを持たせ、bitcoinサイドチェーンのfederated pegのような状態遷移の脆弱性を解決できる。
その結果、スケーラブルな状態遷移がPlasmaチェーン内で可能になる一方で、ブロックデータにアクセス権を持つ監視者たちは不正な状態遷移を証明する（そしてそれゆえ抑制する）ことができるようになる。言い換えれば、支払いはルートチェーンでの周期的なコミットとともにこのチェーンでおきる。

\subsection{デポジット}

ルートチェーンからのデポジットは直接マスターコントラクトに送られる。そのコントラクトは現在の状態のコミットの追跡と、不正なコミットに対しての不正証明を用いたペナルティと、資金の引き出しの処理に対して責任がある。ルートチェーンの完全なバリデーターである子Plasmaチェーンとして、流入するトランザクションは2フェーズロックインを用いて処理されねばならない。


デポジットは目的地となるチェーンのblockhashをチェーンを特定するために含んでいなければならず、そのデポジットは多段処理を用いてその資本が回復不可能ではないことを確認する。

%\ref{fig:hamu}
\begin{figure}[htbp]
  \begin{center}
    %\includegraphics[clip,width=7.0cm]{./img/dummy.eps}
    \caption{AliceはETHアカウントに1ETHを持っている。彼女はそれをPlasmaチェーンに送りたい。彼女はPlasmaコントラクトにそれを送る}
    \label{fig:a}
  \end{center}
\end{figure}

\begin{enumerate}
\item そのコイン/トークン(例：ETHやERC\-20トークン)はルートチェーンのPlasmaコントラクトに送信される。そのコインは一定期間はchallengeやレスポンスを用いて回復可能である。
\item Plasmaチェーンは流入トランザクションの証明を含んでいなければならない。この時点でPlasmaチェーンはトランザクションが流入していて、トランザクションのロックインかデポジットした人の使用のイベントによって利用可能になる事実をコミットしている。これが取り込まれた時、そのチェーンは引き出しリクエストを受け取るという事実に対してコミットしている。しかし、デポジットした人が不正証明を生成するために十分な情報を持っている確認がまだないために、デポジットした人からのコミットはまだ存在しないことになる。このブロックは状態ツリーと、ビットマップと、トランザクションツリーの追加を取り込み、コンパクトな正しい取り込みの証明が得られる。
\item デポジットした人は子Plasmaチェーンにトランザクションに署名をし、トランザクションをアクティベーションし、それはフェーズ2におけるチェーンのコミットメントと共に彼らがブロックを観測したというコミットメントを取り込む。
このプロセスののち、チェーンは彼らがこれらのコインを処理し、アロケーションを与えるという事実に対してコミットしたことになり、したがって引き出しはコンパクトに証明されうる。フェーズ3によってユーザーは彼らは引き出し可能であるということを署名している。
\end{enumerate}

%\ref{fig:hamu}
\begin{figure}[htbp]
  \begin{center}
    %\includegraphics[clip,width=7.0cm]{./img/dummy.eps}
    \caption{Aliceはいま1ETHをPlasmaブロックに持っている。彼女は彼女が資金を観測し、それが今ロックインされたことをコミットした。その資金はルートチェーンのスマートコントラクトの中に保持されており、しかしこのPlasmaチェーンにある台帳の記録（したがって状態遷移、すなわち資金を他者かスマートコントラクトに送ること）は、重大なルートチェーンでの消費なく発生する}
    \label{fig:a}
  \end{center}
\end{figure}


デポジットした人がPhase3を通過していないという状態では、この人はルートチェーンでの引き出しを試みることができる。デポジットをした人は未確認の引き出しリクエストを提出し、さらに長い期間ネットワーク上の誰かがデポジットした人が署名して資金をPlasmaチェーンにロックインしたという不正証明を出してくれるのを待たねばならない。もし証明がなければ、デポジットした人はその未確認の資金を引き出すかもしれない。この引き出しは大きなルートチェインでの供託金が必要で、ビザンチン障害がないことを確認しなければならない。




\subsection{"bitmap化された状態"とmass withdrawal(大量引き出し)}

この系についての初めの関心は状態を検証することへの不適格性だ。
状態トランザクションの最大の圧縮を提供できるようにするために、アウトプットは選択的にビットマップで表現されうる。これは引き出しの照明に必要でルートチェーンに伝えるにはとても高価になりうる。この構造の目標は少額の資本をPlasmaチェーンに持たせることだ。これらの残高は完全な予約をルートチェーンのコントラクトの中に保持され、しかし完全な台帳はルートチェーンの中にはない。初歩的の予期されるべき攻撃は、不正なブロックの保持だ（ルートチェーンへのコミットメントも含める）。このイベントの中でシステムは不正な状態遷移を観測し、参加者はたくさんのイグジットをトランザクションとして生成する。ビットマップの構造とともに、引き出しは署名されたexitを希望するトランザクションのビットマップを含む。スマートコントラクトにより情報の正しさを確認することを強制される、ゲームあるいはプロトコルが後構築される。ビットマップはみんながアウトプットが使われたかどうかの理由づけができるかを確認する。
ビットマップとしては、UTXOとして表現された状態を、少額残高の最大限の効能のために必要とする。利用痕跡はコンパクトに証明され得る、そして状態遷移の大きな集合はきれいに強制される。事前に定義された送金時間の後でそのビットは再利用される。
高い支払いには高い精度、安い支払いには低い精度と言う勾配がある。


\begin{enumerate}
\item ルートチェーンの上での台帳の状態
\item オンチェーンでの単一のトランザクションの経済的に強制可能な、プラズマの上での台帳の状態
\item ビットマップを用いた経済的に強制可能なプラズマ上での台帳の状態
\item ビットマップをルートチェーン上で用いた、経済的に強制可能ではないプラズマ上での台帳の状態。1から2ビットによる大規模引き出しはコストがとても高い。
それらの保持されているルートチェーンの上で強制できる残高のために、ビットマップ化されたフォーマットのUTXOを作る要件は必要ない。しかし、もしその1\-2ビットのトランザクションのガスがルートチェーンでとても低かったときだけそれらの保持されている残高と強制は可能である。
\end{enumerate}

4番目のタイプ（1\-2ビットのケースのオンチェーンコストがとても高くて、大規模引き出しが起こる）については、そのシステムはまだレジリエントであるように設計されている。しかし、いくらかの名前付きエンティティーが信頼できるだろうという推測は含んでいる）。ヒエラルキー的なブロックチェーンの構造をたくさん作るケースでユーザーは経済的に大規模引き出しが可能であることはこの論文の後のセクションで詳しく説明する。加えて、もしトランザクションの総額が4番目のカテゴリでトークン総額よりもだいぶ低い場合、それはゲームを原理的にそれらの残高をトークンホルダーが評判へのダメージで苦しむように攻撃するにはとても高額なものにする。

\subsection{状態遷移}
もともとPlasmaチェーンでの状態遷移は同じようなマルチフェーズのプロセスでデポジットとして実行される。これはユーザが状態遷移を提供することができる情報を確認するためだ。しかしデポジット構築とは異なるように、一度トランザクションが署名されたとブロックに組み込まれると、参加するコミットメントがある。この理由のために状態遷移は署名や、状態アップデート（例：目的地、残高の量、トークンの種類、そして他の種類の関連する状態データ）や、そして同様に何らかの種類の失効を意味するTTL、そして特定のブロックのコミットメントを含むべきだ。このTTLは必要とされずとも、副次的なexit条件が知られていることのexit証明の構築時間より短くあるべきだ。事前に署名されたトランザクションはもちろんTTLを含むべきではない。(TODO)弱い活動性の推測ではそこにすでに活動性の推測が引き出しと共にあるような構造、大きいreorgとともに認識される。ブロックへのコミットメントは、エンティティーがトランザクションをPlasmaチェーンにブロードキャストする残高利用者によるコミットメントで、それはその時点までチェーンを観測し、証明を矯正でき、使用されたアウトプットが生じたブロックまで存在しなければならない。
マルチフェーズコミットは以下の高速なfinalizationにしたがって生じる。
\begin{enumerate}
\item AliceはPlasmaチェーンの中にいてUTXOを同じPlasmaチェーンの中にいるBobのために使いたい（ブロックチェーンに実際の完全なトランザクションレコードを発行することはしたくない）。AliceはひとつのUTXOを消費するトランザクションをPlasmaチェーンに作成し、署名し、トランザクションをブロードキャストする。
\item トランザクションはプラズマチェーンのバリデーターによってブロック内に含まれている。ヘッダーは親のプラズマチェーンのルートチェーンのブロックの中に含まれている。究極的にはルートブロックチェーンにしまわれることになる。
\item アリスとボブはトランザクションを観察する。そしてトランザクションとブロックを承認したということを署名する。この承認と署名は別のプラズマチェーンに保存される。
ファイナリティを得るのに時間がかかる場合は、ステップ1だけが起こる必要がある。
\end{enumerate}

承認のあと、トランザクションはファイナリティを得たと考えられる。ステップ3が必要な理由は、AliceとBobがブロックが利用可能かどうか確認できるようにするためだ。ステップ3はなくともシステムは機能するが、ファイナリティを得るのに時間がかかるだろう。根拠としては、そのブロックのすべての参加者から正当さと情報の利用可能性がトランザクションに対して十分に証明されるまで、トランザクションはファイナライズされたと見られるべきではないからだ。


ステップ1ではアリスはまだ彼女がUTXOを使ったのかどうか定かではない。もしトランザクションが既にブロックに取り込まれていて、ステップ3が終わっていなかったら、そのトランザクションは未確認として扱われる。したがってアリスは、もし彼女がルートと親のチェーンにファイナライズされる前に引き出しメッセージに署名をしていなかったら、それらの資金をまだ引き出すことができる。ファイナライズされた後にはAliceは引き出すことはできず、Bobに送金されたものと見なされる。もしブロックがファイナライズの前（ステップ1と2の間）に保留されるとしたら、アリスもしくはボブがそれを観測したときその場合アリスはまだファイナライズドされていない資金を引きだすだろう。もしステップ2とステップ3の間にブロックが保留されるとしたら、Bobは引き出すのに資金を引き出す十分な情報持っていると推測される。しかしAliceもBobも完全にペイメント支払いをコミットしないために、それは完了したとみなされない。それはその参加者が理論的に資金を主張することができるかどうかという情報の利用可能性に依存する。もし双方がステップ3に署名した場合、完全にファイナライズされたと見なされる。Pay\-to\-contract\-hash執行はこのステップが完了したあとに生じる、特に署名がオンチェーンで確かに確認されたあとに生じる。一方が署名やブロックの保留を拒んだ際には、リデンプションプルーフ（償還証明）に依存する。全ての状態が結果的にマークル証明を介してコミットされると、支払いとしてのPay\-to\-contract\-hashが確かにファイナライズのあとに施行可能になるのは信頼性が低い。

ステップ3はスマートコントラクトに対して選択的なのを注意されたい、両者の署名ではない、他には、状態はHTLCプレイメージのリリースに対しても選択的である。これは複数チェーンや複数トランザクションのアトミック性を実現する。コントラクト作成の複雑さは増加し、これらの機能が必要ならばより高レベルな言語やツールが必要になるだろう。



\subsection{ルートチェーンへの周期的なコミット}
プラズマチェーンはブロックチェーンの順番を作成できなくてはならない。プラズマチェーンではブロックの順序があり、それら自身では証明されも整列されもしていない。結果的に、ルートブロックチェーンにコミットメントを作る必要がある。プラズマチェーンはそれ自身のブロックヘッダを他者のための情報の利用可能性についてのデータと共にルートチェーンに作成する。他のどんな参加者でも不正証明を発行でき、コミットメントとブロックは発行者を罰しつつロールバックする。
これらのコミットはのちの不明確さのない正しい整列を可能にする。不確かな情報が試みられた場合、十分な不正証明があるだろうし、作成者はペナルティされうる。しばらくした後にブロックはファイナライズされ、結果的にルートチェーンもファイナリティにいたる。



\subsection{引き出し}
Plasmaはルートチェーンを離れて、ネイティブなコインやトークン（例：ETHやERC\-20トークン）で資金を預けることを可能にする。さらに、情報可用性（提出されたUTXOの正当性）の供給されたルートチェーンによって制限されたプラズマチェーン上での状態遷移も可能にする。ただし情報可用性の失敗のイベントにおいては、mass exitをPlasmaチェーン試みねばならない。最終的には、Plasmaチェーンに保持された資金の単純な引き出しもまた可能である。
しかし、通常の操作においては、ユーザーは単純な引き出しができる。

\subsubsection{単純引き出し}
単純な引き出しについて、ユーザーはルートチェーンにコミットされ、Plasmaチェーンにおいて最終的にはファイナライズされた資金を引き出すことだけを許されている。
デポジット、コンパクトに表現された台帳の状態、そして状態遷移の設計についてはすでに解説した。このフェーズまで、不正証明を除いた現在のあらゆるPlasmaチェーンの台帳の状態のルートチェーンへの発行はなかった。しかし引き出しによって、資金が現在もPlasmaチェーンに保持されているという特別な証明が必要になる。
出金はPlasmaチェーンとルートチェーンの間の硬貨の交換可能性を保証するので、最もクリティカルな構成要素である。もしユーザーが資金をPlasmaチェーンにデポジットすることが可能なら、状態遷移をして、それらの当事者は資金を引き出すことができ、そして値はルートチェーン上のコインの値と密接に対応する必要がある。場合によってはPlasmaチェーン上の資金はより大きなトランザクションキャパシティを持つので便利ですが、セキュリティは最終的にルートチェーンに依存する。
単純引き出しについて、全ての資金は大きな供託金を必要とし、全ての引き出しは大きな供託金を不正証明として含まねばなりません。もし現在のブロックデータが利用可能なら、サードパーティサービスがPlasmaチェーンがアクティブであることを検証でき、引き出し証明が正当であると保証できるので、サードパーティがこの証明を例外的に安いコストで提供することが可能である。
全てのPlasmaチェーンの参加者は状態を更新する際に、全ての親Plasmaチェーンとルートチェーンを　特定のアカウント/アウトプットに対して進行中の引き出しがないと保証するために検証しなければならない。

もし引き出しが進行中であれば、後続のブロックはコインやトークンを使用できず、いかなるビザンチン障害を引き起こしうる振る舞いはコンセンサスを違反するし、不正証明とペナルティとルートチェーンのPlasmaコントラクトによるブロックのロールバックを受けなければならない。

引き出しは以下のステップで行われる。

\begin{enumerate}
\item 署名された引き出しのトランザクションがルートチェーンか親Plasmaチェーンに提出される。引き出し額は全アウトプット額と等しくなければならない（部分引き出しは不可）。複数のアウトプットも同時に引き出しされうるが、同じPlasmaチェーンに存在するアウトプットでなければならない。アウトプットのビットマップの位置は引き出しの一部として公開される。追加の供託金は偽の引き出しリクエストをペナルティするために引き出しの一部として設置される。
\item 申し立て(dispute)を許容するための既定のタイムアウト期間が存在する。これはLightning Networkの"dispute period"と同じものである。このケースでは、もし誰かがアウトプットが既に引き出し先のチェーン（多くの場合ルートチェーン）の中で使用されていると証明できるなら、引き出しはキャンセルされ供託された引き出しリクエストはロストする。チェーンを監視している誰もがこの申し立てを行える。もし使用されたアウトプットの不正証明が用いられた場合、供託金は失われ、引き出しはキャンセルされる。
\item 他のいかなるより少ない(小さい) block confirmation height を持つ引き出しリクエストのタイムアウトを待つための二度目の遅延が存在する。これは順番に整列された引き出しを特定のPlasmaチェーンやルートチェーンで強制するためのものである。
\item もしPlasmaのスマートコントラクトで定義された同意された申し立て時間が過ぎ、不正証明がルートチェーンや親チェーンで供給されなかった場合、その引き出しは正当であると推定され、引き出し主は資金をルート/親チェーンに償還できる。引き出しはUTXO（あるいは実装によってはアカウント）の生成時刻が古いものから順に処理される。
\end{enumerate}

注釈として、Plasmaチェーン上での "block withholding attack" のイベント中に引き出しをすることは、経済的に可能な条件において、ありえるのを留意してほしい。
不正証明は、コンパクトに証明可能な、ネットワーク上の誰かが同じアウトプットからの重複した署名の消費を証明することだけを必要とする。Lightning Networkと他のstate channelにおいては、追加要求はより高いnonceを同様に証明しないといけない。チャネルについては、もし低いnonceの引き出しが試みられた場合、資金はPlasmaチェーンの中に残る、正当な署名での引き出しで依然利用可能ということになる。他の実装もまた可能であるが、Plasmaチェーンでの不正証明スマートコントラクトの生成の一部として事前読み出しされた設計が必要であろう。

通常の引き出しが遅く、高額な処理であるので、引き出しが一つの引き出しに合体するか、他者が喜んでコインを他のチェーンのためにLightning NetworkやAtomic Swapを使ってスワップするというのはありそうなことである。


\subsubsection{高速引き出し}
高速引き出しは単純引き出しと同じ構造で、しかし資金はAtomic Swapを行うコントラクトに送られる。スワップされる資金は、low timelockなルート/親チェーンの資金と、high timelockなPlasmaチェーンをexitする資金だ。
高速引き出しはインスタントではない。しかしPlasmaチェーンがビザンチン（分散合意がない/block withholding attackも含む）ではない条件において、劇的にトランザクションがファイナリティを得るまでの引き出し時間を減らす。この理由から、高速引き出しのスワップはblock withholding attackの最中には行えず、遅いmass withdrawalリクエストが代わりに必要になるだろう。
高速引き出しは以下のステップで実現される。

\begin{enumerate}
\item Aliceは資金をルートチェーンに引き出したいが、待ちたくない。彼女はその利便性のために付加価値を払う準備がある。Larry（流動性供給者）はこれをサービスとして供給する。AliceとLarryはルートチェーンへの引き出しのために協力する。Plasmaチェーンはビザンチンではない(分散合意がある)とみなす。
\item 資金は、Plasmaチェーンの特定のアウトプットのコントラクトにロックされる。これは通常の送金と同じ方法であり、双方の当事者はトランザクションをブロードキャストし、あとでPlasmaブロックで観測したトランザクションをコミットする。コントラクトのtermsは、もしコントラクトがルートチェーンにブロードキャストされてファイナライズされるなら、支払いはPlasmaチェーンまで回される。もしトランザクション証明がないなら、Aliceは資金を償還できる。Aliceがpreimageを生成することでHTLC(LNに用いられるエスクロー的プロトコル)として実装することも可能であり、彼女がそれを受け入れ可能で資金が送信されたとみなしたあとでのみ解放される。
\item 上記のPlasmaブロックがfinalizeされ、Larryがコントラクトの条件に合致したイベントで資金を償還できる確信があるとき、LarryはAliceに特定の金額（この金額は彼が受け取るであろう金額は彼がサービスによって徴収する金額より小さい必要がある）の支払いを可能にするオンチェーンのコントラクトを作成する。
\end{enumerate}

この例で流動性提供者であるLarryはアクティブで、このスワップを受け入れる前にPlasmaチェーンで完全にvalidateされていなければならない。もしLarryがPlasmaチェーンで完全にvalidateされえない（それかルートチェーンで定義された不正証明のスマートコントラクトに沿わない）とき、彼は引き出しを実行すべきではない。もしLarryがこのチェーンの資金を欲さず、ルートチェーンの資金を欲する場合、Larryは引き出しの一部としてのこのAtomic Swapを実行したあとか完遂したあとに引き出しを開始できる。
多くの場合、Plasmaチェーン間の流動性提供者と共に行う差金決済(net\-settlement)は費用対効果がよい。送金はLingtning NetworkかAtomic Swapのような迅速なfinalityを提供する手段でPlasmaチェーン間で行われる。
これはAtomic cross\-chain swapなので、AliceとLarryは保管上の(custodial)信頼を互いに必要としない。

Aliceは彼女の資金をルート/親チェーンで保有し、Larryはのちにルート/親チェーンに完全なアクセスを得る。低コストのブロック利用とfinalityのあるルートチェーンのnon\-Byzantineな振る舞いにおいて、Larryはたとえ彼がPlasmaチェーン自体を信頼していなくとも、資金を受け取れることを十分確信できる。


\subsection{敵対的Mass Withdrawal}
敵対的Mass Withdrawal TransactionはPlasmaフレームワークの範囲内のものである一方、これはプロトコルに必要というわけではなく、これは状態の経済的堅牢さ（低いgas代）をblock withholding攻撃中に得るための設計だ。もし誰かがアカウントの状態をPlasmaチェーン内で使いたいと考えた時、その人は支払いの階層構造のような他の設計に頼る。加えて、UTXOモデルがここでは用いられていることに留意してほしく、しかしこのシステムはルートチェーンがアカウントモデルを用いているときにワークする。さらに、もし大量引き出しが必要でないか望まれてない機能だった場合、アカウントモデルをPlasmaチェーン内での資金の保管に使うことが可能であり、単純な引き出しが可能になる（インクリメンタルなIDを割り振る形で）。
はじめに紹介したPlasmaの設計の考察はblock withholding攻撃を不正証明（あるいはその他のデータ欠損の痕跡）で防ぐことに関係していて、データの使用不可能性の特定作業を緩和する必要がある。もしブロックの利用不可能性がユーザーによってPlasmaチェーンで検出された場合、特定の日時までに参加者がチェーンを離脱することは急務である。もし期日までに離脱しきれなかった場合の結果はLightning Networkで不正引き出しに申し立てをしなかった場合と同じである。このメカニズムはPlasmaを正しく動作させるためのキーである。Plasmaはもしユーザーがblock withholdingを検知したら、すぐさまチェーンを離脱する責任があるという事実に依拠している。その根拠としてはルートチェーンは子チェーンのブロックがwithholdされていること（ユーザーがブロックをまだ受け取っていないと主張することか、Plasmaチェーンがユーザーがブロックが利用可能であると認識することを拒否したり嘘をついている際に申し立てること）を知ることができないからだ。結果として、申し立てられたブロックの利用不可能性に関するコストは伝統的に現状のオンチェーンを公開しようとする（Lightning Networkと同様）。しかし、大きいブロックと状態遷移について、これはかなり高額になり、それらのコストを誰が支払うのか不透明なのでPlasmaはこの実装を用いない。代わりに、Plasmaチェーンが敵対的にブロックをwithholdしているとユーザーが信じていて、将来、状態遷移を強制する能力に影響を与えかねなくて、別のチェーンに可能な限り速やかに移動しなければならないことをPlasmaは想定している。
したがって、ブロックが利用不可である限りにおいてこれを敵対的大量引き出しと定義し、Plasmaチェーンが敵対的かビザンチンであると想定する。大量exitはPlasmaチェーンのビザンチンな振る舞いが一定時間の遅延とチェーンの停止よりほかはユーザーの資本等に影響を与えないことを保証する。
これは追加のSNARKsを用いたセキュリティ緩和が将来的に利用されることを想定されるが、しかし特定の設計はオープンクエスチョンとして残される。この実装はルートチェーンでの観察者の周期的な活動性による引き出しに関してSNARKsに依存するわけではなく、しかし状態遷移をPlasmaチェーン内で強制することによって、攻撃する能力や、ビザンチンなPlasmaチェーンを、周期的に観察していないユーザーから資金を盗むための敵対的なblock withholdに導くことができる能力は、SNARKsのセキュリティ特性により最小化され強制される。

このケースでは、状態遷移をするためのSNARKsの証明とより大きな状態遷移への保証を得るためのSNARKsの証明を必要とするだろう。しかしPlasmaの目的はユーザーがチェーンを監視していて、スマートコントラクトがこのメカニズムを適切に処理することと、ルートチェーン上で引き出しを可能にする条件において正しい状態遷移の振る舞いをSNARKsに依存することではない。スマートコントラクトをサポートしたサードパーティーチェーンによる再帰的なSNARKs証明のコミットによってのみオフチェーンの状態が可能であることを保証することによって、現在の状態の正当性を保証することは、Lightning Networkにも同様の利点として存在する。
Plasmaチェーンは何層もの防衛手段によってセキュアになる。まず第一にセキュアな要素とハードウェアによって、次にSNARKs/STARKsによって、最後にオンチェーンのゲーム理論的な相互作用によってだ。第一ラインが突破されても、第二ラインが優れた暗号化方式で防衛する。最終ラインは公開された透明なゲーム理論的駆け引きだ。まずは我々は最終ラインを使って提案する。
大量引き出しは以下の方法で行われるexitの相互ゲームによって達成される。

\begin{enumerate}
\item Aliceは他者と強調してPlasmaチェーンからの大量exitを試みる。複数の大量exitが同時に起こるが、彼らは引き出しを重複することはない。このシナリオでかられは残高を更新し、順番に処理され、重複を生み出したものはペナルティを受ける。全ての当事者は資金を他のPlasmaチェーンに送金せねばならない。
exitを処理する役目のPatはexitを喜んでさばく。
\item Patは目的地となるPlasmaチェーンに資金を送金する手はずを整え、自動的に大量exitがfinalizeされた際に新しいチェーンで資金が利用可能になるようにする。
\item PatはPlasmaチェーンを情報の利用可能性に関して検証する。この指摘は申し立て受け入れ可能期間になされねばならないしPlasmaのfinalityが得られるまでの期間（ルートチェーンとは別）までに、そしてスマートコントラクトで決められた期間までになされなければならない。Patはpending中の新しいPlasmaチェーン上の目的地の台帳を参加者に公開する。Patはexitを希望する全ての署名を参加者から集める（Aliceも含む）。Patは最新のブロックにおいて全ての参加者がexitを行う権利があるかを検証する。Patは大量の供託金とともにexitトランザクションを作成する（ルートチェーンのスマートコントラクトを用いる）。Patは参加者から利用料を徴収する。
\item ユーザーは署名を手に入れたあと再度大量引き出しに署名する。これはPatがもはやペナルティされないという状態をユーザーに可能にし、ロックインされる。二度目の署名を提出していないユーザーは含まれない。
\item Patは他にexitがないか監視する。重複があれば取り除く。exitトランザクションに署名してルートチェーンか親チェーンにブロードキャストする。
重複のシナリオでチェーンの親は主導権を取り（ルートチェーンがもっとも優先）。先のトランザクションの方が優先である。MEIT(大量exit開始トランザクション/Mass Exit Initiation Transaction)のブロードキャストに際して、Patは以下の情報を正しく持っていることの証明を供託する。ブロックの正当性、そのblock heightのUTXOたち、finalizeしていないこと、マークル化されたbitmapからUTXOへのMap、コミットされた額（高速証明のためのマークル木）、Aliceとその他の署名などは、申し立てが起きた時に利用可能である。MEITの一部としてPatは完全なexit中の状態のbitmapを発行する。参加者はもし何かが不正に感じられたら、ルート/親チェーンを監視していて何がexitしようとしていたり申し立てられているのかを検証できる。MEITのFinalityは長く、数週間かかるなのでMEITは最後の手段的なトランザクションになる（将来の高速化はSNARKsでおそらく可能）
\item もし重複引き出しがあればPatは短い猶予期間の間に引き出されようとしている残高やbitmapを更新する選択肢がある。
\item いかなるネットワークの参加者もMEITで証明されたデータにDMET(申し立てられた大量exitトランザクション/Disputed Mass\-Exit Transaction)で申し立てができる。しかしPatは、将来にブロックがアウトプットを置き換えられるかどうか知ることができず、Patはトランザクションが将来のブロックで使用されてもペナルティされないはずである（ユーザーはされる）。もし申し立てが行われると、資金が申し立ての完了までロックされる。これらの申し立ては猶予期間の初期に行われるはずで、申し立てが政党ならばPatは引き出される残高を更新しなければならない。
\item もし問題がなければ、既定のMEITのfinalize期間を経て、ユーザーは資金を得る。
\end{enumerate}

Plasmaチェーンのfinalizeの期間はチェーンを周期的に監視しなければいけない期間である。その期間ののち、全てのPlasmaチェーンの参加者はブロックデータの利用可能性を保持していることになる。
事実上、MEITがPatに作られた際、Patはそれぞれの引き出しのアウトプットへの署名を持っており、特定のPlasmaチェーンの高さにおいて情報の正しさを証明する。Patは証明期間のあとにアウトプットが二重支払いされていても罰されない（block withholding攻撃もPatをペナルティしない）。

\subsubsection{Mass Withdrawalへの異議申し立て:不正な引き出しへの訴え}
Aliceのようなユーザーが、Patが彼女の同意なしに大量引き出しを試みているのを見たら、彼女はその引き出しを申し立てを用いて無効化できる。
\begin{enumerate}
\item AliceはPatが彼女のoutputのうちの一つを含めてPlasmaチェーンの大量引き出しを試みているのを見た。それはbitmapフィールド化したフィールドの一つとして利用可能なものとされる。Aliceは大量の供託金とともに申し立てる。この供託は申し立ては処理されないということを証明している。

\item もししばらく経っても異議申し立てがない場合、Aliceは供託金をリファンドできる。そして全MEITはキャンセルされる。もしPatかいずれかの当事者が彼女の不正確な引き出し申請に対して不正証明を出し、出金申請への異議申し立てが証明されれば、彼女の供託金は切り捨てられる。
\end{enumerate}

参加者は署名がMEITの第二フェーズで必要ということについて自覚があり、したがって彼らはもし出金申請が詐欺的だったら、その申請に異議を申し立てるための十分な情報を持つ。インセンティブは不正な出金申請をすることに対して逆らっていて、ルートチェーンでの非検閲性やブロックの可用性の条件で、彼らはペナルティを受ける。

\subsubsection{異議を申し立てられたMass\-Exitトランザクション}
アウトプットがのちのブロックでのMEITによって使用されたとき、Patはこれを知らないし、彼はblock withholdingを証明できないので、彼はペナルティを受けるべきではない。
おそらくここでは似たようなbitmapされた集合に向けた複数の異議申し立てがあり、しかしそれらは大きな供託が備えてなければならない。
いかなる参加者も大きな供託付きの支払いのbitmap/rangeを表現できる。高額の供託はコインがブロックヘッダーへのコミットとともにのちのブロックで使われたことの証明である。
しかしこの異議申し立てはコンパクトには証明さえれず、したがって他の繰り返される出金申請は、CDMET(Challenge on the Disputed Mass\-Exit Transaction / 異議を申し立てられたMass\-Exitトランザクションにおける出金申請)を発行することが可能だ。
この異議申し立てにおける出金申請は以下の通りである。
\begin{enumerate}
\item Aliceは誰か（例：そのチェーンでblock withholdingをしている操作主）が彼女が参加している大量引き出しに異議申し立てをしていることに気づく。彼女は異議申し立て中に、その申し立ての提出者の申し立ては正当になりえないことを証明する高額な供託とともに出金申請を提出する。
\item 出金への異議申し立ての提出者は、一定時間内にその出金申請に応えなければならない。もし提出者が支払い証明(本質的にはのちにそのUTXOを使用したトランザクションの署名)を提供できない場合、Aliceは放免され、全体の異議申し立てがキャンセルされる（これが重複した異議申し立てが受け入れられる理由だ）。もし提出者がコイン(UTXO)が使用されていると証明できるなら、Aliceは高額な供託を失い、異議申し立ては継続する。
\end{enumerate}

\subsection{UTXOのリサイクル}
使用したアウトプットがfinalizeされたあと、スペース節約のためにUTXO bitmapを再利用するのは可能である。

\subsection{要約}
「大量引き出しゲーム」の結果、最も楽観的なケースで1引き出しごとに1-2bitだけを使う引き出しが可能になる。

大量exitはblock withholding攻撃のシナリオで必要になるものである。しかしこれはとても高くつく処理になるだろう。多くの理由で、ルートチェーンに依存しない別の戦略もまた必要になるだろう。
この実装は多くの参加者に彼らの資金を子チェーンで持つことを可能にし、もしブロック情報が利用可能なら状態の無効化は不正証明を経由して起こり、状態遷移（例：支払い）は可能で、引き出しも可能で、大量exit（けれども遅延はある）もblock withholding攻撃のシナリオにおいて可能になる。


